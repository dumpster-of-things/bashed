#!/usr/bin/env bash

[[ "$1" != +(\-)@([hH])?([eE][lL][pP]) ]] || {
	for p in /usr/share ${PATH//:/ } ; do
		[[ ! -f "$p/bashed/bashed-help" ]] || { . "$p/bashed/bashed-help" $2 ; exit 0 ; }
	done
}

declare -g String
declare -ga Strings

exactly() {
	_0() { [[ "$String" == ${@} ]] ; }
	_1() { [[ "$String" != ${@} ]] ; }
	_$1 "${@:2}"
}

fuzzily() {
	_0() { [[ "$String" == *"${@}"* || "${@}" == *"$String"* || "$String" == *${@}* || ${@} == *"$String"* ]] ; }
	_1() { [[ "$String" != *"${@}"* && "${@}" != *"$String"* && "$String" != *${@}* && ${@} != *"$String"* ]] ; }
	_${1} "${@:2}"
}

dp() { local -i x; while read item ; do Array[${#Array[@]}]="$item" ; done < <(for((;++x<=$#;)){ echo "${!x}" ; } ; [ -t 0 ] || cat - ) ; local IFS=\| ; echo "${Array[*]}" ; }

toLast() {
	_b() { : "${2%$1*}" ; [[ "$1" != \[*\] ]] && String="${2::${#_}+${#1}}" || String="${2::${#_}+1}" ; }
	_a() { : "${String%%$1*}" ; _b "$2" "${String:${#_}}" ; }
	_a "$1" "$2"
}
toFirst() {
	_b() { : "${2%%$1*}" ; [[ "$1" != \[*\] ]] && String="${2::${#_}+${#1}}" || String="${2::${#_}+1}" ; }
	_a() { : "${String%%$1*}" ; _b "$2" "${String:${#_}}" ; }
	_a "$1" "$2"
}

dundre() { [[ "$String" != *$1* ]] || String="${String%%${String#*$1}*}" ; }

OtherPipe() {
	local -a Argz string
	while read line ; do
		String="$line"
		for ((a=1;a<=$#;a++)); do
			case "${!a}" in
			*\/*"$'\n'"*\/*) if [[ "${!a##*\/}" == *[!\ ]* ]]; then cat - | dp "$String" | $FUNCNAME "//\|/'${!a##*\/}'" "${@:$a+1}" ; else { echo "$String" ; cat - ; } | xargs | $FUNCNAME "${@:$a+1}" ; fi ; unset String ;;
			\/*[!\/]*\/*"$'\n'"*) eval Strings\=\( $(eval printf '%q' \"\$\{String"${!a}"\}\") \) ; unset String ;;
			[\_\.]\(*\)) String="$String${!a:2: -1}" ;;
			\-[bB]*|\-\-[bp][er][fe][op][re][en]*) [[ -z "${!a//*\=*}" ]] || ((++a)) ; String="${!a#*\=}$String" ;;
			\(*\)[\.\_]) String="${!a:1: -2}$String" ;;
			\-[aA]|\-\-a[pf][pt][e][nr]*) [[ -z "${!a/*\=*/}" ]] || ((++a)) ; String="$String${!a#*\=}" ;;
			\-[cCfF]|'--color'*|'--font'*) [[ -z "${!a//*\=*/}" ]] || ((++a)) ; String=$(echo -e "\e[${!a#*\=}m$String\e[0m") ;;
			\?\?\=*[!\}]) exactly "0" "${!a:3}" || { unset String ; break ; } ;;
			\?\!\=*[!\}]) exactly "1" "${!a:3}" || { unset String ; break ; } ;;
			\?\?\~*[!\}]) fuzzily "0" "${!a:3}" || { unset String ; break ; } ;;
			\?\!\~*[!\}]) fuzzily "1" "${!a:3}" || { unset String ; break ; } ;;
			\?\?\=*\.\{*\}) onDo="${!a#*\.\{}" && exactly "1" "${!a:3: -${#onDo}-2}" ||  { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\!\=*\.\{*\}) onDo="${!a#*\.\{}" && exactly "0" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\?\~*\.\{*\}) onDo="${!a#*\.\{}" && fuzzily "1" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\!\~*\.\{*\}) onDo="${!a#*\.\{}" && fuzzily "0" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\:[!0-9\:]*|\:\:[!0-9]*)
				if [[ "${!a}" == \:\:+([!\:])\:\:* ]]; then
					while read ence ; do [[ -z "$ence" ]] || dundre "$ence" ; done < <(echo "${!a//'::'/$'\n'}" )
				else
					if [[ "${!a}" == \:+([!\:])\:+([!\:]) ]]; then
						x="${!a:1}" && y="${x#*\:}" && toFirst "${x%%\:*}" "$y"
						unset x y
					elif [[ "${!a}" == \:+([!\:])\:\:* ]]; then
						x="${!a:1}" && y="${x#*\:\:}" && toLast "${x%%\:*}" "$y"
						unset x y
					else
						if [[ ${!a:1:1} == \: ]]; then
							dundre "${!a:2}"
						else
							[[ "$String" != *${!a:1}* ]] || String="${String#*${String%%${!a:1}*}}"
						fi
					fi
				fi
				;;
			*)
				if [[ "${!a}" == \{+([[:digit:]])\}\.* ]]; then
					rp="${!a%%\}*}" && ((rt=(${rp:1} + 0)))
					for ((ri=0;ri<rt;ri++)); do
						String=$(echo "$String" | $FUNCNAME "${!a#*\}\.}")
					done
					unset rp rt ri
				else
					eval String\=\$\{String"${!a}"\}
				fi
			esac
			if (( ${#Strings[@]} != 0 )); then
				for ((i=0;i<${#Strings[@]};i++)); do
					echo "${Strings[i]}"
				done | $0 "${@:$a+1}"
				unset Strings[*]
				continue
			fi
			(( ${#String} > 0 )) || break
		done
		(( ${#String} == 0 )) || echo "$String"
	done < <(cat - )
}

[[ -f "${!#-1}" && $# -gt 1 ]] && { [ -t 0 ] && { cat "${!#-1}" | OtherPipe "${@:1:$#-1}" ; } || { cat "${!#-1}" - | OtherPipe "${@:1:$#-1}" ; } ; } || { [ -t 0 ] && { echo "$1" | OtherPipe "${@:2}" ; } || { cat - | OtherPipe "${@}" ; } ; } 2>/dev/null
